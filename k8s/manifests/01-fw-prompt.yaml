apiVersion: v1
kind: Service
metadata:
  name: fw-prompt
  namespace: fw-prompt
spec:
  ports:
    - port: 80
      nodePort: 30080
      targetPort: 8080
  selector:
    app: envoy-proxy
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-proxy
  namespace: fw-prompt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-proxy
  template:
    metadata:
      labels:
        app: envoy-proxy
    spec:
#      securityContext:
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
      containers:
        - name: envoy
          image: envoyproxy/envoy:debug-v1.30.0
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
          args:
            - "--config-path /etc/envoy/envoy.yaml"
#          securityContext:
#            runAsUser: 1001
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop: ["ALL"]
#              add: ["NET_BIND_SERVICE"]
#            seccompProfile:
#              type: RuntimeDefault
#            readOnlyRootFilesystem: true
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-config
            items:
              - key: envoy.yaml
                path: envoy.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: fw-prompt
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8080
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ingress_http
                    access_log:
                      - name: envoy.access_loggers.file
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                          path: /dev/stdout
                          logFormat:
                            omit_empty_values: true
                            jsonFormat:
                              start_time: "%START_TIME%"
                              bytes_received: "%BYTES_RECEIVED%"
                              bytes_sent: "%BYTES_SENT%"
                              protocol: "%PROTOCOL%"
                              response_code: "%RESPONSE_CODE%"
                              response_code_details: "%RESPONSE_CODE_DETAILS%"
                              connection_termination_details: "%CONNECTION_TERMINATION_DETAILS%"
                              duration: "%DURATION%"
                              response_flags: "%RESPONSE_FLAGS%"
                              route_name: "%ROUTE_NAME%"
                              grpc_status: "%GRPC_STATUS%"
                              path: "%REQ(:PATH)%"
                              method: "%REQ(:METHOD)%"
                              authority: "%REQ(:AUTHORITY)%"
                              downstream_host: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                              upstream_host: "%UPSTREAM_HOST%"
                              upstream_cluster: "%UPSTREAM_CLUSTER%"
                              upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                              upstream_transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                              forwarded_for: "%REQ(X-Forwarded-For)%"
                              traceid: "%REQ(X-Request-Id)%"
                              version: "%REQ(Y-Ohai-Version)%"
                              request_headers: "%DYNAMIC_METADATA(envoy.lua.log:request_headers)%"
                              request_body: "%DYNAMIC_METADATA(envoy.lua.log:request_body)%"
                              response_headers: "%DYNAMIC_METADATA(envoy.lua.log:response_headers)%"
                              response_body: "%DYNAMIC_METADATA(envoy.lua.log:response_body)%"
                              level: info
                              mark: AccessLog


                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains:
                            - "*"
                          typed_per_filter_config:
                            lua_filter_request_response_logging:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              source_code:
                                inline_string: |

                                  function envoy_on_request(handle)
                                    local headers = {}
                                    for k, v in pairs(handle:headers()) do
                                      headers[k] = v
                                    end
                                    handle:streamInfo():dynamicMetadata():set(
                                      "envoy.lua.log", "request_headers", headers)

                                    local md = handle:headers():get(":method")
                                    if md ~= "POST" and md ~= "PUT" then return end

                                    local n = 0
                                    local body = ""
                                    for chunk in handle:bodyChunks() do
                                      body = body..chunk:getBytes(0, chunk:length())
                                      n = n + chunk:length()
                                      if n > 10240 then break end
                                    end

                                    if n > 0 then
                                      if handle:headers():get("content-type") == "application/grpc" then
                                        handle:streamInfo():dynamicMetadata():set(
                                          "envoy.lua.log", "request_body", handle:base64Escape(body))
                                      else
                                        handle:streamInfo():dynamicMetadata():set(
                                          "envoy.lua.log", "request_body", body)
                                      end
                                    end

                                  end

                                  function envoy_on_response(handle)
                                    local headers = {}
                                    for k, v in pairs(handle:headers()) do
                                      headers[k] = v
                                    end
                                    handle:streamInfo():dynamicMetadata():set(
                                      "envoy.lua.log", "response_headers", headers)

                                    local n = 0
                                    local body = ""
                                    for chunk in handle:bodyChunks() do
                                      body = body..chunk:getBytes(0, chunk:length())
                                      n = n + chunk:length()
                                      if n > 10240 then break end
                                    end

                                    if n > 0 then
                                      if handle:headers():get("content-type") == "application/grpc" then
                                        handle:streamInfo():dynamicMetadata():set(
                                          "envoy.lua.log", "response_body", handle:base64Escape(body))
                                      else
                                        handle:streamInfo():dynamicMetadata():set(
                                          "envoy.lua.log", "response_body", body)
                                      end
                                    end
                                  end
                          routes:
                            - match:
                                prefix: "/"
                              route:
                                cluster: service_app_chatbot


                    http_filters:
                      - name: lua_filter_request_response_logging
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua

                      - name: envoy.filters.http.ext_authz
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                          with_request_body:
                            pack_as_bytes: true
                            max_request_bytes: 10240
                          http_service:
                            server_uri:
                              uri: llm-guard.ctrl-prompt.svc.cluster.local:80
                              cluster: service_ctrl_prompt
                              timeout: 5s
                            authorization_request:
                              headers_to_add:
                                - key: "Content-Type"
                                  value: "application/json"


                                  # - key: "x-echo-code"
                                  #   value: "200"

                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
        - name: service_ctrl_prompt
          connect_timeout: 5s
          type: LOGICAL_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: service_ctrl_prompt
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: llm-guard.ctrl-prompt.svc.cluster.local
                          port_value: 80

        - name: service_app_chatbot
          connect_timeout: 5s
          type: LOGICAL_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: service_app_chatbot
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: app-chatbot.app-chatbot.svc.cluster.local
                          port_value: 80
